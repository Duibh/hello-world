[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/conor/Documents/Projects/spellPoints/hello-world/src/main/scala/Main.scala","languageId":"scala","version":1,"text":"import scalafx.Includes._\r\nimport scalafx.application.JFXApp\r\nimport scalafx.application.JFXApp.PrimaryStage\r\nimport scalafx.scene.Scene\r\nimport scalafx.scene.control._\r\nimport scalafx.scene.layout._\r\nimport scalafx.geometry.Insets\r\n\r\nobject SpellPointTracker extends JFXApp {\r\n\r\n  val spellPointMax: Map[Int, Int] = Map(1 -> 4, 2 -> 6, 3 -> 14, 4 -> 17, 5 -> 27, 6 -> 32, 7 -> 38, 8 -> 44, 9 -> 57)\r\n  var spellPoints: Map[Int, Int] = Map.empty\r\n\r\n  def setCasterLevel(level: Int): Unit = {\r\n    spellPoints = spellPointMax.map { case (lvl, max) =>\r\n      val points = if (lvl <= level) max else 0\r\n      lvl -> points\r\n    }\r\n    totalPointsLabel.text = s\"Total spell points: ${spellPoints.values.sum}\"\r\n\r\n    spellLevelSpinners.foreach { spinner =>\r\n      val level = spinner.userData.asInstanceOf[Int]\r\n      spinner.maxValue = new Integer(spellPointMax(level))\r\n      spinner.value.value = spellPoints(level)\r\n    }\r\n  }\r\n\r\n  val casterLevelComboBox = new ComboBox[Int](1 to 20)\r\n  casterLevelComboBox.selectionModel().selectFirst()\r\n  casterLevelComboBox.value.onChange((_, _, newValue) => {\r\n    setCasterLevel(newValue)\r\n  })\r\n\r\n  val spellLevelSpinners: Seq[Spinner[Int]] = spellPointMax.keys.toSeq.sorted.map(level => {\r\n    val spinner = new Spinner[Int](1, spellPointMax(level), spellPoints.getOrElse(level, 0))\r\n    spinner.userData = level\r\n    spinner.value.onChange((_, _, newValue) => {\r\n      spellPoints += (level -> newValue)\r\n      totalPointsLabel.text = s\"Total spell points: ${spellPoints.values.sum}\"\r\n    })\r\n    spinner\r\n  })\r\n\r\n  val totalPointsLabel = new Label(s\"Total spell points: ${spellPoints.values.sum}\")\r\n\r\n  val spellLevelLabels: Seq[Label] = spellPointMax.keys.toSeq.sorted.map(level =>\r\n    new Label(s\"Level $level (${spellPointMax(level)} points)\")\r\n  )\r\n\r\n  val gridPane = new GridPane {\r\n    hgap = 10\r\n    vgap = 10\r\n    padding = Insets(10)\r\n    add(new Label(\"Caster level:\"), 0, 0)\r\n    add(casterLevelComboBox, 1, 0)\r\n    spellLevelLabels.zipWithIndex.foreach { case (label, index) =>\r\n      add(label, 0, index + 1)\r\n      add(spellLevelSpinners(index), 1, index + 1)\r\n    }\r\n    add(totalPointsLabel, 0, spellLevelLabels.size + 1, 2, 1)\r\n  }\r\n\r\n  stage = new PrimaryStage {\r\n    title = \"Spell Point Tracker\"\r\n    scene = new Scene {\r\n      root = new BorderPane {\r\n        center = gridPane\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/*\r\nimport scalafx.Includes._\r\nimport scalafx.application.JFXApp\r\nimport scalafx.geometry.{Insets, Pos}\r\nimport scalafx.scene.Scene\r\nimport scalafx.scene.control.{Button, Label, Spinner}\r\nimport scalafx.scene.layout.{GridPane, HBox, VBox}\r\n\r\nobject SpellPointsApp extends JFXApp {\r\n  // Set up the initial spell points value\r\n  var spellPoints: Int = 0\r\n\r\n  // Define the maximum number of spell points for each spell level\r\n  val spellPointMax: Map[Int, Int] = Map(\r\n    1 -> 4,\r\n    2 -> 6,\r\n    3 -> 14,\r\n    4 -> 17,\r\n    5 -> 27,\r\n    6 -> 32,\r\n    7 -> 38,\r\n    8 -> 44,\r\n    9 -> 57\r\n  )\r\n\r\n  // Define the UI elements\r\n  val totalPointsLabel = new Label(s\"Total spell points: $spellPoints\")\r\n  val resetButton = new Button(\"Reset\")\r\n  val spellLevelSpinners: Seq[Spinner[Int]] = spellPointMax.keys.toSeq.sorted.map(level => {\r\n    val spinner = new Spinner[Int](1, spellPointMax(level), 0)\r\n    spinner.value.onChange((_, _, newValue) => {\r\n      spellPoints += newValue\r\n      totalPointsLabel.text = s\"Total spell points: $spellPoints\"\r\n    })\r\n    spinner\r\n  })\r\n\r\n  // Define the event handlers\r\n  resetButton.onAction = _ => {\r\n    spellPoints = spellPointMax.values.sum\r\n    spellLevelSpinners.foreach(_.getValueFactory.setValue(0))\r\n    totalPointsLabel.text = s\"Total spell points: $spellPoints\"\r\n  }\r\n\r\n  // Define the layout\r\n  val spellPointsGrid = new GridPane {\r\n    hgap = 10\r\n    vgap = 5\r\n    padding = Insets(10)\r\n    alignment = Pos.Center\r\n    add(totalPointsLabel, 0, 0, 2, 1)\r\n    add(new Label(\"Spell Level\"), 0, 1)\r\n    add(new Label(\"Spell Points\"), 1, 1)\r\n    spellLevelSpinners.zipWithIndex.foreach { case (spinner, index) =>\r\n      add(new Label(s\"Level ${index + 1}\"), 0, index + 2)\r\n      add(spinner, 1, index + 2)\r\n    }\r\n    add(resetButton, 0, spellPointMax.size + 2, 2, 1)\r\n  }\r\n\r\n  val layout = new VBox {\r\n    spacing = 10\r\n    padding = Insets(10)\r\n    children = Seq(\r\n      new HBox {\r\n        alignment = Pos.Center\r\n        children = Seq(totalPointsLabel)\r\n      },\r\n      spellPointsGrid\r\n    )\r\n  }\r\n\r\n  // Create the scene\r\n  stage = new JFXApp.PrimaryStage {\r\n    title.value = \"Spell Points Tracker\"\r\n    scene = new Scene {\r\n      content = layout\r\n    }\r\n  }\r\n}\r\n*/"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\conor\Documents\Projects\spellPoints\hello-world\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed 14 Mar 2023, 20:45:20[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, â™¨1, shutdown, null})[0m
